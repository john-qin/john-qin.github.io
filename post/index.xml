<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on JOHN QIN, a father of two</title>
    <link>http://john-qin.github.io/post/</link>
    <description>Recent content in Posts on JOHN QIN, a father of two</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015</copyright>
    <lastBuildDate>Thu, 05 Mar 2015 20:01:23 -0500</lastBuildDate>
    <atom:link href="http://john-qin.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to install mysql on FreeBSD 10.1</title>
      <link>http://john-qin.github.io/how-to-install-mysql-on-freebsd-10.1/</link>
      <pubDate>Thu, 05 Mar 2015 20:01:23 -0500</pubDate>
      
      <guid>http://john-qin.github.io/how-to-install-mysql-on-freebsd-10.1/</guid>
      <description>

&lt;h4 id=&#34;install-mysql:97ddc83d2ccffc4f890d5cfdd28055ee&#34;&gt;Install MySQL&lt;/h4&gt;

&lt;p&gt;To install MySQL 5.6 using pkg, use this command:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;sudo pkg install mysql56-server
&lt;/pre&gt;&lt;/div&gt;

Enter &lt;strong&gt;y&lt;/strong&gt; at the confirmation prompt. This installs the MySQL server and client packages.
To enable MySQL server as a service, add &lt;strong&gt;mysql_enable=&amp;ldquo;YES&amp;rdquo;&lt;/strong&gt; to the &lt;strong&gt;/etc/rc.conf&lt;/strong&gt; file. This &lt;strong&gt;sysrc&lt;/strong&gt; command will do just that:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;sudo sysrc &lt;span class=&#34;nv&#34;&gt;mysql_enable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;yes
&lt;/pre&gt;&lt;/div&gt;

Now start the MySQL server:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;sudo service mysql-server start
&lt;/pre&gt;&lt;/div&gt;

Now that your MySQL database is running, you will want to run a simple security script that will remove some dangerous defaults and slightly restrict access to your database system. Start the interactive script by running this command:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;sudo mysql_secure_installation
&lt;/pre&gt;&lt;/div&gt;

The prompt will ask you for your current root password (the MySQL admin user, root). Since you just installed MySQL, you most likely won’t have one, so leave it blank by pressing RETURN. Then the prompt will ask you if you want to set a root password. Go ahead and enter Y, and follow the instructions.&lt;/p&gt;

&lt;h4 id=&#34;create-a-user-for-remote-login:97ddc83d2ccffc4f890d5cfdd28055ee&#34;&gt;Create a user for remote login&lt;/h4&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;mysql -uroot -p

// allow user to log in from a specific host
create user &lt;span class=&#34;s1&#34;&gt;&amp;#39;Username&amp;#39;&lt;/span&gt;@&lt;span class=&#34;s1&#34;&gt;&amp;#39;11.11.11.1&amp;#39;&lt;/span&gt; identified by &lt;span class=&#34;s1&#34;&gt;&amp;#39;Abcd1234567’;&lt;/span&gt;

&lt;span class=&#34;s1&#34;&gt;// allow user to log in from anywhere&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;create user &amp;#39;&lt;/span&gt;Username&lt;span class=&#34;s1&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;%&lt;span class=&#34;s1&#34;&gt;&amp;#39; identified by &amp;#39;&lt;/span&gt;Abcd1234567’&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

// grant privileges to user
grant all privileges on *.* to &lt;span class=&#34;s1&#34;&gt;&amp;#39;qinking126&amp;#39;&lt;/span&gt;@&lt;span class=&#34;s1&#34;&gt;&amp;#39;11.11.11.11’;&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;grant all privileges on *.* to &amp;#39;&lt;/span&gt;qinking126’@&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;%’&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;click here to learn more on &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql&#34;&gt;how to create a new user and grant permissions in my sql&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang FAQ</title>
      <link>http://john-qin.github.io/golang-faq/</link>
      <pubDate>Wed, 04 Mar 2015 20:01:23 -0500</pubDate>
      
      <guid>http://john-qin.github.io/golang-faq/</guid>
      <description>

&lt;h4 id=&#34;what-does-an-underscore-in-front-of-an-import-statement-mean:d6285ae886e65156d09727c7ef74f774&#34;&gt;What does an underscore in front of an import statement mean?&lt;/h4&gt;

&lt;p&gt;Blank assignments identify code as a work in progress. Or to import a package solely for its side-effects(initialization), use the blank identifier as explicit package name.&lt;/p&gt;

&lt;h4 id=&#34;what-is-in-go:d6285ae886e65156d09727c7ef74f774&#34;&gt;What is &amp;hellip; in Go?&lt;/h4&gt;

&lt;p&gt;A parameter type prefixed with three dots(&amp;hellip;) is called a variadic parameter. That means you can pass any number or arguments into that parameter. The function will receive the list of arguments for the parameter as a slice of the type declared for the parameter.&lt;/p&gt;

&lt;p&gt;A parameter:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Is, for the function equivalent to :
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The difference is how you pass the arguments to such a function. It is done either by giving each piece of the slice seperately, or as a slice, in which case you will have to suffix the slice-value with the three dots. The following examples will result in the same call:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;First&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Second&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Third&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Will do the same as:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;First&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Second&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Third&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang Method</title>
      <link>http://john-qin.github.io/golang-method/</link>
      <pubDate>Tue, 03 Mar 2015 19:29:23 -0500</pubDate>
      
      <guid>http://john-qin.github.io/golang-method/</guid>
      <description>&lt;p&gt;Go has both functions and methods. In Go, a method is a function that is declared with a receiver. A receiver is a value or a pointer of a named or struct type.  All the methods for a given type belong to the type&amp;rsquo;s method set.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s declare a struct type and a method for that type:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Email&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;First we declare a struct type named &lt;strong&gt;User&lt;/strong&gt; and then we declare a method named &lt;strong&gt;Notify&lt;/strong&gt; with a receiver that accepts a value of type &lt;strong&gt;User&lt;/strong&gt;. To call the &lt;strong&gt;Notify&lt;/strong&gt; method we need a value or pointer of type User:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// Value of type User can be used to call the method&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// with a value receiver.&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bill&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Bill&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;bill@email.com&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Pointer of type User can also be used to call a method&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// with a value receiver.&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;jill&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Jill&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;jill@email.com&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;jill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;in the case where we are using a pointer, Go adjusts and dereferences the pointer so the call can be made. Be aware that when the receiver is not a pointer, the method is operating against a copy of the receiver value.&lt;/p&gt;

&lt;p&gt;If you are unsure about when to use a value or a pointer for the receiver, always use pointer. The Go wiki has a great set of &lt;a href=&#34;https://code.google.com/p/go-wiki/wiki/CodeReviewComments#Receiver_Type&#34;&gt;rules&lt;/a&gt; that you can follow.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>